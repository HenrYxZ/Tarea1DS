// Class automatically generated by Dev-C++ New Class wizard

#include "kangarooarray.h" // class's header file
#include <sstream>

using namespace std;

// class constructor
kangarooArray::kangarooArray()
{
   _size = 0;
   _length = 100;
   _values = new kangaroo[_length+1];
                              
}

kangarooArray::kangarooArray(int max)
{
	_size = 0;
	_length = max;
	_values = new kangaroo[max+1];
	
}

kangarooArray::kangarooArray(const kangarooArray& kSource)
{
      _size = kSource._size;
      _length = kSource._length;
      _values = new kangaroo[_length+1];
      
      for(int i=0; i < _size; i++)
      {
              _values[i] = kSource._values[i];
      }
                                        
}

kangarooArray& kangarooArray::operator= (const kangarooArray &kSource)
{
      _size = kSource._size;
      _length = kSource._length;
      _values = new kangaroo[_length+1];
      
      for(int i=0; i < _size; i++)
      {
              _values[i] = kSource._values[i];
      }     
      
} 



// class destructor
kangarooArray::~kangarooArray()
{
    
	delete  _values;
}

int kangarooArray::size()
{
    return _size;
}

bool kangarooArray::isEmpty()
{
     
     if (_size == 0)
         return true;
     else
         return false;
      
}

void kangarooArray::add(int position, kangaroo k)
{
     //fuera de los limites
     if(position < 0 || position > _size)
        return;
        //expandir si está lleno
        if(_size == _length)
        expandir();
    
         //mover los que están a la derecha de position-1
         for(int i=_size-1; i >= position; i--)
         {
             _values[i+1]  = _values[i];        
         }
         
         _values[position] = k;
         _size++;
     
     
}

kangaroo kangarooArray::get(int position)
{
     return  _values[position];     
}




void kangarooArray::remove(int position)
{
     if(position < 0 || position > _size)
	             return;
     else
     {
         
         
	     for (int i = position; i < _size-1; i++) 
         {
		     _values[i] = _values[i+1];
         }
	      
	      _size--;
          
	 } 
     
         
}

void kangarooArray::expandir()
{
       kangaroo* aux = new kangaroo[_length+_length/2];
       for(int i=0; i < _length; i++)
       {
               aux[i] = _values[i];
               
       }
       delete _values;
       _values = aux;
       _length = _length+_length/2;
                                 
}

ostream& operator<< (ostream& out, const kangarooArray& k)
{
    
    string pos;
    stringstream out2;
   
    
    string linea; 
    
    for(int i=0; i < k._size; i++)
    { 
            
            out2 << i;
            pos = out2.str();
            linea = "(" + pos + ") ";
            out << linea;
            out << k._values[i];
            out << endl;
    }
    
    return out;
}
